함수

1. 매개변수와 인수
매개변수: 함수에 입력으로 전달된 값을 받는 변수
인수: 함수를 호출할 때 전달하는 입력값

2. 일반적인 함수
def 함수이름(매개변수):
    수행항 문장
    ...
    return 결괏값
return은 결괏값을 반환해준다.

- 결괏값을 받을 변수 = 함수 이름(입력인수1, 입력인수2, ...)

3. 입력값이 없고 결괏값만 있는 함수
- 결괏값을 받을 변수 = 함수이름()

4. 결괏값이 없는 함수
- 함수이름(입력인수1, 입력인수2, ... )

❗ 결괏값이 있는데 왜 없냐!
- print 있잖아!😡
- 하지만 결괏값은 return 명령어로만 돌려 받는다고 한다.

예시)
def add(a, b):
    print("%d, %d의 합은 %d입니다." % (a,b,a+b))

>>> a = add(3,4)
3, 4의 합은 7입니다.

>>> print(a)
None

a의 값은 None이다. 함수 add는 반환값으로 a 변수에 None을 돌려준다. 
왜냐하면 return한 결괏값이 아무 것도 없기 때문에!
None이 결괏값이라고 생각하면 곤란하다...

5. 입력값도 결괏값도 없는 함수
def say():
    print("Hi")

>>> say()
Hi

- 함수이름()

6. 입력값이 여러 개 일 때
def 함수이름(*매개변수)
    수행할 문장
    ...

7. 키워드 파라미터
def print_kwargs(**kwargs):
    print(kwargs)

>>> print_kwargs(a=1)
{'a':1}
>>> print_kwargs(name='foo', age=3)
{'age':3, 'name':'foo'}

8. return 되는 값은 하나
근데 난 두 개 썼던 것 같은데! 그 생각을 했더니 책에서 바로 알려준다.
return a+b, a*b
를 적으면 (a+b, a*b)의 튜플을 되돌려준다.

9. 매개변수에 초깃값 설정이 가능하다.
- 매개변수의 값이 변하지 않을 때 이렇게 사용해주면 유용하다.
주의점❗ 초깃값 설정하는 변수는 맨 뒤로 보내기

10. 함수 안에서 선언한 변수
함수 안에서 선언한 변수와 밖에서 선언한 변수는 다르다.

11. 함수 안에서 함수 밖의 변수를 변경하는 방법?
1) return 사용
2) global 사용

12. Lambda
예약어로 def와 동일한 역할을 한다.
함수를 한 줄로 만들고 싶을 때! 간단한 함수일 때!

lambda 매개변수1, 매개변수2, 매개변수3, ...: 매개변수를 사용한 표현식
- lambda 는 filter 에 많이 쓰이는 것 같다.

>>> add = lambda a, b: a+b
>>> result = add(3,4)
>>> print(result)
7
